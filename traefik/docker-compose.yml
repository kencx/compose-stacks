---
version: '3.6'

services:
  reverse-proxy:
    container_name: traefik
    image: traefik:${TRAEFIK_IMG_VER:-latest}
    restart: unless-stopped
    user: ${CUID:-1000}:${CGID:-1000}
    security_opt:
      - no-new-privileges:true
    env_file: traefik.env
    environment:
      - TZ=${TZ:-Asia/Singapore}
    ports:
      - 80:80
      - 443:443
      - ${TRAEFIK_WEB_PORT:-8085}:8085
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik.log:/traefik.log   # access log
      - ./acme/acme.json:/acme.json  # certificate resolver
      - ./rules:/rules  # file provider
    networks:
      - proxy

    # command:
    #   - --global.checkNewVersion=true
    #   - --global.sendAnonymousUsage=false
    #
    #   # api
    #   - --api=true
    #   - --api.insecure=true  # enables traefik entrypoint
    #   - --api.dashboard=true
    #
    #   # routing
    #   - --entryPoints.http.address=:80
    #   - --entryPoints.https.address=:443
    #   - --entryPoints.traefik.address=:${TRAEFIK_WEB_PORT:-8085}
    #
    #   # logging
    #   - --log=true
    #   - --log.level=DEBUG
    #   - --accessLog=true
    #   - --accessLog.filePath=/traefik.log
    #   - --accessLog.filters.statusCodes=400-499
    #
    #   # providers - docker
    #   - --providers.docker=true
    #   - --providers.docker.network=proxy
    #   - --providers.docker.endpoint=unix:///var/run/docker.sock
    #   - --providers.docker.exposedByDefault=false
    #   - --providers.docker.defaultRule=Host(`{{ index .Labels "com.docker.compose.service" }}.${DOMAIN_NAME}`)
    #
    #   # providers - file
    #   - --providers.file.directory=/rules
    #
    #   # let's encrypt - dns challenge provider: digitalocean
    #   - --certificatesresolvers.dns-dgo.acme.email=${CA_EMAIL}
    #   - --certificatesresolvers.dns-dgo.acme.storage=acme.json
    #   - --certificatesresolvers.dns-dgo.acme.dnschallenge=true
    #   # staging or production server
    #   # - --certificatesresolvers.dns-dgo.acme.caServer=${CA_SERVER}
    #   - --certificatesresolvers.dns-dgo.acme.dnschallenge.provider=digitalocean
    #   - --certificatesresolvers.dns-dgo.acme.dnschallenge.resolvers=1.1.1.1:53,1.0.0.1:53

    labels:
      - "traefik.enable=true"

      # HTTP to HTTPs redirects
      - "traefik.http.routers.http-catch.entrypoints=http"
      - "traefik.http.routers.http-catch.rule=HostRegexp(`{host:.+}`)"
      - "traefik.http.routers.http-catch.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"

      # HTTPS Routers
      - "traefik.http.routers.traefik-router.entrypoints=https"
      - "traefik.http.routers.traefik-router.rule=Host(`traefik.${DOMAIN_NAME}`)"
      - "traefik.http.routers.traefik-router.tls=true"  # HTTPs only
      # Comment out the below line after first run of traefik to force the use of wildcard certs
      - "traefik.http.routers.traefik-router.tls.certResolver=dns-dgo"
      - "traefik.http.routers.traefik-router.tls.domains[0].main=${DOMAIN_NAME}"
      - "traefik.http.routers.traefik-router.tls.domains[0].sans=*.${DOMAIN_NAME}"
      - "traefik.http.routers.traefik-router.service=api@internal"

networks:
  proxy:
    external: true
  default:
    driver: bridge
